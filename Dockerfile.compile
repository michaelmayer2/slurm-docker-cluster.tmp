ARG DIST="focal"
ARG DISTNUM="2004"

FROM ubuntu:${DIST}

LABEL org.opencontainers.image.source="https://github.com/michaelmayer2/slurm-docker-cluster" \
      org.opencontainers.image.title="slurm-docker-cluster" \
      org.opencontainers.image.description="Slurm Docker cluster on Ubuntu ${DIST} LTS" \
      org.label-schema.docker.cmd="docker-compose up -d" \
      maintainer="Michael Mayer"

ARG GOSU_VERSION=1.11
ARG R_VERSIONS="3.6.3 4.0.5 4.1.2"
ARG RSWB_VERSION
ARG PROXY
ARG DIST="focal"
ARG DISTNUM="2004"

# Install and configure R and RStudio Workbench

COPY rstudio/create.R /tmp/create.R 

RUN apt-get update -y && \
	apt-get install -y gdebi-core curl wget && \ 
	IFS=" "; for R_VERSION in $R_VERSIONS ; \
	do \
		curl -O https://cdn.rstudio.com/r/ubuntu-${DISTNUM}/pkgs/r-${R_VERSION}_1_amd64.deb && \
		gdebi -n r-${R_VERSION}_1_amd64.deb && \
		rm -f r-${R_VERSION}_1_amd64.deb && \
		/opt/R/$R_VERSION/bin/Rscript /tmp/create.R ;\
	done && \
	apt clean all && \
        rm -rf /var/cache/apt
RUN apt-get update -y && groupadd  -g 999 rstudio-server && \ 
   	useradd -g 999 -m -u 999 -s /bin/bash rstudio-server && \
        curl -O https://s3.amazonaws.com/rstudio-ide-build/server/${DIST}/amd64/rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
	gdebi -n rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
	rm -f rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
    	apt clean all && \
    	rm -rf /var/cache/apt


COPY rstudio/launcher.conf /etc/rstudio/launcher.conf
COPY rstudio/launcher.slurm.conf /etc/rstudio/launcher.slurm.conf
COPY rstudio/launcher.slurm.profiles.conf /etc/rstudio/launcher.slurm.profiles.conf
COPY rstudio/rserver.conf /etc/rstudio/rserver.conf
COPY rstudio/database.conf /etc/rstudio/database.conf
RUN chmod 0600 /etc/rstudio/database.conf
COPY rstudio/load-balancer /etc/rstudio/load-balancer


## Configure launcher.* and secure-cookie-key

RUN apt-get update && apt-get install -y uuid && \
	apt clean all && \
	rm -rf /var/cache/apt

RUN echo `uuid` > /etc/rstudio/secure-cookie-key && \
	chown rstudio-server:rstudio-server \
		/etc/rstudio/secure-cookie-key && \
    chmod 0600 /etc/rstudio/secure-cookie-key

RUN openssl genpkey -algorithm RSA \
		-out /etc/rstudio/launcher.pem \
		-pkeyopt rsa_keygen_bits:2048 && \
	chown rstudio-server:rstudio-server \
		/etc/rstudio/launcher.pem && \
        chmod 0600 /etc/rstudio/launcher.pem

RUN openssl rsa -in /etc/rstudio/launcher.pem \
		-pubout > /etc/rstudio/launcher.pub && \
	chown rstudio-server:rstudio-server \
		/etc/rstudio/launcher.pub


## Add VSCode and Jupyter/Python 

### Install Python  -------------------------------------------------------------#

ARG PYTHON_VERSION=3.8.10
RUN curl -O https://cdn.rstudio.com/python/ubuntu-${DISTNUM}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb && \
    apt-get update && gdebi -n python-${PYTHON_VERSION}_1_amd64.deb && apt clean all && \
    rm -rf /var/cache/apt && rm -f python-${PYTHON_VERSION}_1_amd64.deb

RUN /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip 

RUN /opt/python/${PYTHON_VERSION}/bin/pip install \
    jupyter \
    jupyterlab \
    workbench_jupyterlab \
    rsp_jupyter \
    rsconnect_jupyter \
    rsconnect_python 

RUN /opt/python/${PYTHON_VERSION}/bin/jupyter-nbextension install --sys-prefix --py rsp_jupyter && \
    /opt/python/${PYTHON_VERSION}/bin/jupyter-nbextension enable --sys-prefix --py rsp_jupyter && \
    /opt/python/${PYTHON_VERSION}/bin/jupyter-nbextension install --sys-prefix --py rsconnect_jupyter && \
    /opt/python/${PYTHON_VERSION}/bin/jupyter-nbextension enable --sys-prefix --py rsconnect_jupyter && \
    /opt/python/${PYTHON_VERSION}/bin/jupyter-serverextension enable --sys-prefix --py rsconnect_jupyter
 

ARG PYTHON_VERSION_ALT=3.9.5
RUN curl -O https://cdn.rstudio.com/python/ubuntu-${DISTNUM}/pkgs/python-${PYTHON_VERSION_ALT}_1_amd64.deb && \
    apt-get update && gdebi -n python-${PYTHON_VERSION_ALT}_1_amd64.deb && apt clean all && \
    rm -rf /var/cache/apt && rm -f python-${PYTHON_VERSION_ALT}_1_amd64.deb

RUN /opt/python/${PYTHON_VERSION_ALT}/bin/pip install --upgrade pip

RUN /opt/python/${PYTHON_VERSION_ALT}/bin/pip install \
    jupyter \
    jupyterlab \
    workbench_jupyterlab \
    rsp_jupyter \
    rsconnect_jupyter \
    rsconnect_python 

RUN /opt/python/${PYTHON_VERSION_ALT}/bin/jupyter-nbextension install --sys-prefix --py rsp_jupyter && \
    /opt/python/${PYTHON_VERSION_ALT}/bin/jupyter-nbextension enable --sys-prefix --py rsp_jupyter && \
    /opt/python/${PYTHON_VERSION_ALT}/bin/jupyter-nbextension install --sys-prefix --py rsconnect_jupyter && \
    /opt/python/${PYTHON_VERSION_ALT}/bin/jupyter-nbextension enable --sys-prefix --py rsconnect_jupyter && \
    /opt/python/${PYTHON_VERSION_ALT}/bin/jupyter-serverextension enable --sys-prefix --py rsconnect_jupyter

COPY rstudio/jupyter.conf /etc/rstudio/jupyter.conf


#### Install VSCode code-server --------------------------------------------------#

#COPY rstudio/vscode.conf /etc/rstudio/vscode.conf
#COPY rstudio/vscode-user-settings.json  /etc/rstudio/vscode-user-settings.json
# Install VSCode based on the PWB version. 
RUN /bin/bash -c "if ( rstudio-server | grep configure-vs-code ); then rstudio-server configure-vs-code ; rstudio-server install-vs-code-ext; else rstudio-server install-vs-code /opt/code-server/; fi"

## Install SLURM

### Install prerequisites/dependencies

RUN /bin/bash -c "set -x \
    && groupadd -r --gid=105 munge \
    && useradd -r -s /bin/bash -g munge --uid=105 munge"

RUN set -ex \
    && apt-get update \
    && apt-get -y install \
       wget \
       bzip2 \
       perl \
       gcc-9 \
       g++-9 \
       gcc \
       g++ \
       git \
       gnupg \
       make \
       munge \
       libmunge-dev \
       python-is-python3 \
       python3.8-dev \
       python3-pip \
       cython3 \
       mariadb-server \
       mariadb-client \
       libmariadbd-dev \
       psmisc \
       bash-completion \
       vim \
       python3-nose \
       #libdbus-1-dev \
    && apt clean all \
    && rm -rf /var/cache/apt

RUN set -ex \
    && apt-get update \
    && apt-get -y install libcgroup-dev \
    && apt clean all \
    && rm -rf /var/cache/apt

ARG SLURM_VERSION

## Build SLURM from source and add folders and permissions
RUN mkdir -p /tmp/build && cd /tmp/build \
    && bash -c "git clone --depth 1 -b slurm-\${SLURM_VERSION//./-} https://github.com/SchedMD/slurm.git" \
    && cd slurm \
    && bash -c "./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
        --with-mysql_config=/usr/bin  --libdir=/usr/lib64 >& /tmp/build.log"\
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && cd .. \
    && rm -rf slurm \
    && groupadd -r --gid=995 slurm \
    && useradd -r -g slurm --uid=995 slurm \
    && mkdir -p /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/run/slurmdbd \
        /var/lib/slurmd \
        /var/log/slurm \
        /data \
    && touch /var/lib/slurmd/node_state \
        /var/lib/slurmd/front_end_state \
        /var/lib/slurmd/job_state \
        /var/lib/slurmd/resv_state \
        /var/lib/slurmd/trigger_state \
        /var/lib/slurmd/assoc_mgr_state \
        /var/lib/slurmd/assoc_usage \
        /var/lib/slurmd/qos_usage \
        /var/lib/slurmd/fed_mgr_state \
    && chown -R slurm:slurm /var/*/slurm* 

RUN if [ -f /usr/sbin/create-munge-key ]; then /usr/sbin/create-munge-key ; else /usr/sbin/mungekey -c -f; fi 

COPY slurm/slurm.conf /etc/slurm/slurm.conf
COPY slurm/slurmdbd.conf /etc/slurm/slurmdbd.conf

RUN echo "CgroupAutomount=yes \n\
#CgroupPlugin=cgroup/v1 \n\
ConstrainCores=yes \n\
ConstrainRAMSpace=yes" > /etc/slurm/cgroup.conf

RUN chmod 0600 /etc/slurm/slurmdbd.conf
RUN chown 105:105 /etc/munge/munge.key 

## Add Singularity Integration

RUN mkdir -p /tmp/singularity
COPY singularity/spank/* /tmp/singularity/
RUN cd /tmp/singularity && make && make install #&& cd && rm -rf /tmp/singularity 

RUN mkdir -p /opt/apptainer/containers

RUN APPTAINER_VERSION=1.1.3 && \
	APPTAINER_DOWNLOAD="https://github.com/apptainer/apptainer/releases/download" && \
	apt-get update && \
	curl -LO ${APPTAINER_DOWNLOAD}/v${APPTAINER_VERSION}/apptainer_${APPTAINER_VERSION}_amd64.deb && \
	curl -LO ${APPTAINER_DOWNLOAD}/v${APPTAINER_VERSION}/apptainer-suid_${APPTAINER_VERSION}_amd64.deb && \
	gdebi -n apptainer_${APPTAINER_VERSION}_amd64.deb && \
	gdebi -n apptainer-suid_${APPTAINER_VERSION}_amd64.deb && \
	rm -f apptainer_${APPTAINER_VERSION}_amd64.deb apptainer-suid_${APPTAINER_VERSION}_amd64.deb


## Configure a mail client and add a couple of nice to have tools

RUN mkdir -p /etc/postfix

COPY rstudio/main.cf /etc/postfix/main.cf
ENV DEBIAN_FRONTEND=noninteractive

RUN set -ex \
    && apt-get update \
    && apt-get -y install \
       net-tools iputils-ping postfix mailutils \
    && apt clean all \
    && rm -rf /var/cache/apt



## Install gosu

RUN set -ex \
    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64.asc" \
    && export GNUPGHOME="$(mktemp -d)" \
    && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true


## Add test user rstudio

RUN groupadd rstudio -g 2048 \
        && useradd -m rstudio -s /bin/bash -u 2048 -g 2048\
        && bash -c "echo -e \"rstudio\\nrstudio\" | passwd rstudio"


COPY scripts/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

CMD ["slurmdbd"]
